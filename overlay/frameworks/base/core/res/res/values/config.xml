<?xml version="1.0" encoding="utf-8"?>
<!--
/*
** Copyright 2018 The LineageOS Project
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
*/
-->

<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">

    <!-- If this is true, the screen will come on when you plug/unplug usb/power/whatever. -->
    <bool name="config_unplugTurnsOnScreen">true</bool>

    <!-- Shutdown if the battery temperature exceeds (this value * 0.1) Celsius. -->
    <integer name="config_shutdownBatteryTemperature">600</integer>

    <!-- Is the notification LED intrusive? Used to decide if there should be a disable option -->
    <bool name="config_intrusiveNotificationLed">true</bool>

    <!-- Is the battery LED intrusive? Used to decide if there should be a disable option -->
    <bool name="config_intrusiveBatteryLed">true</bool>

    <!-- Set to true to add links to Cell Broadcast app from Settings and MMS app. -->
    <bool name="config_cellBroadcastAppLinks">true</bool>

    <!-- List of regexpressions describing the interface (if any) that represent tetherable
         USB interfaces.  If the device doesn't want to support tething over USB this should
         be empty.  An example would be "usb.*" -->
    <string-array translatable="false" name="config_tether_usb_regexs">
        <item>"rndis\\d"</item>
    </string-array>

    <!-- List of regexpressions describing the interface (if any) that represent tetherable
         Wifi interfaces.  If the device doesn't want to support tethering over Wifi this
         should be empty.  An example would be "softap.*" -->
    <string-array translatable="false" name="config_tether_wifi_regexs">
        <item>ap\\d</item>
    </string-array>

    <string-array translatable="false" name="config_tether_bluetooth_regexs">
        <item>bt-pan</item>
	<item>bt-dun</item>
    </string-array>

    <!-- Make things go fast -->
    <bool name="config_ui_enableFadingMarquee">false</bool>

    <!-- Configuration to restart radio upon PDP_DEACTIVATE with
         error cause as Regular deactivation(36). -->
    <bool name="config_restart_radio_on_pdp_fail_regular_deactivation">false</bool>

     <string-array translatable="false" name="networkAttributes">
        <item>wifi,1,1,1,-1,true</item>
	<item>mobile,0,0,0,-1,true</item>
	<item>mobile_mms,2,0,2,60000,true</item>
	<item>mobile_supl,3,0,2,60000,true</item>
	<item>mobile_dun,4,0,2,60000,true</item>
	<item>mobile_hipri,5,0,3,60000,true</item>
	<item>mobile_fota,10,0,2,60000,true</item>
	<item>mobile_ims,11,0,-1,-1,true</item>
	<item>mobile_cbs,12,0,2,60000,true</item>
	<item>wifi_p2p,13,1,0,-1,true</item>
	<item>mobile_ia,14,0,2,-1,true</item>
	<item>mobile_emergency,15,0,2,-1,true</item>
	<item>mobile_dm,20,0,3,60000,true</item>
	<item>mobile_wap,21,0,3,60000,true</item>
	<item>mobile_net,22,0,3,60000,true</item>
	<item>mobile_cmmail,23,0,3,60000,true</item>
	<item>mobile_rcse,24,0,3,60000,true</item>
	<item>mobile_xcap,25,0,3,60000,true</item>
	<item>mobile_rcs,26,0,3,60000,true</item>
	<item>mobile_bip,27,0,3,60000,true</item>
	<item>mobile_vsim,28,0,-1,60000,true</item>
    </string-array>

    
    <string-array translatable="false" name="radioAttributes">
        <item>"1,1"</item>
        <item>"0,1"</item>
        <item>"7,1"</item>
    </string-array>

    <!-- Boolean indicating if restoring network selection should be skipped -->
    <!-- The restoring is handled by modem if it is true -->
    <bool translatable="false" name="skip_restoring_network_selection">true</bool>

    <!-- Boolean indicating whether the wifi chipset has dual frequency band support -->
    <bool translatable="false" name="config_wifi_dual_band_support">true</bool>

    <!-- Boolean indicating whether the wifi chipset has background scan support -->
    <bool translatable="false" name="config_wifi_background_scan_support">true</bool>

    <bool name="config_enableWifiDisplay">true</bool>

    <bool name="config_wifiDisplaySupportsProtectedBuffers">false</bool>

    <!-- Flag indicating if the user is notified when the mobile network access is restricted -->
    <bool name="config_user_notification_of_restrictied_mobile_access">false</bool>

    <!-- Display low battery warning when battery level dips to this value -->
    <integer name="config_lowBatteryWarningLevel">10</integer>
    
    <!-- Whether safe headphone volume is enabled or not (country specific). -->
    <bool name="config_safe_media_volume_enabled">false</bool>    
    
    <!-- Control the behavior when the user long presses the home button.
            0 - Nothing
            1 - Menu key
            2 - Recent apps view in SystemUI
            3 - Launch assist intent
            4 - Voice Search
            5 - In-app Search
         This needs to match the constants in
         policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
    -->
    <integer name="config_longPressOnHomeBehavior">0</integer>

    <!-- When true use the linux /dev/input/event subsystem to detect the switch changes
         on the headphone/microphone jack. When false use the older uevent framework. -->
    <bool name="config_useDevInputEventForAudioJack">true</bool>

    
    <!-- Flag indicating whether round icons should be parsed from the application manifest. -->
    <bool name="config_useRoundIcon">true</bool>

    <bool name="config_automatic_brightness_available">true</bool>
	
    <!-- Control whether Night display is available. This should only be enabled on devices
         with HWC 2.0 or higher. -->
    <bool name="config_nightDisplayAvailable">true</bool>

    <!-- Enable doze mode
         ComponentName of a dream to show whenever the system would otherwise have
         gone to sleep.  When the PowerManager is asked to go to sleep, it will instead
         try to start this dream if possible.  The dream should typically call startDozing()
         to put the display into a low power state and allow the application processor
         to be suspended.  When the dream ends, the system will go to sleep as usual.
         Specify the component name or an empty string if none.
         Note that doze dreams are not subject to the same start conditions as ordinary dreams.
         Doze dreams will run whenever the power manager is in a dozing state. -->
    <string name="config_dozeComponent">com.android.systemui/com.android.systemui.doze.DozeService</string>
    <!-- If true, the doze component is not started until after the screen has been turned off
         and the screen off animation has been performed. -->
    <bool name="config_dozeAfterScreenOff">true</bool>
    
<!-- Power Management: Specifies whether to decouple the interactive state of the
         device from the display on/off state.
         When false, setInteractive(..., true) will be called before the display is turned on
         and setInteractive(..., false) will be called after the display is turned off.
         This mode provides best compatibility for devices that expect the interactive
         state to be tied to the display state.
         When true, setInteractive(...) will be called independently of whether the display
         is being turned on or off.  This mode enables the power manager to reduce
         clocks and disable the touch controller while the display is on.
         This resource should be set to "true" when a doze component has been specified
         to maximize power savings but not all devices support it.
         Refer to power.h for details.
    -->
    <bool name="config_powerDecoupleInteractiveModeFromDisplay">true</bool>
	
    <!-- Auto Power Modes is required for Doze and App Standby -->
    <bool name="config_enableAutoPowerModes">true</bool>
    
    <!-- Screen brightness used to dim the screen while dozing in a very low power state.
         May be less than the minimum allowed brightness setting
         that can be set by the user. -->
    <integer name="config_screenBrightnessDoze">3</integer>
	
    <!-- Minimum allowable screen brightness to use in a very dark room.
         This value sets the floor for the darkest possible auto-brightness
         adjustment.  It is expected to be somewhat less than the first entry in
         config_autoBrightnessLcdBacklightValues so as to allow the user to have
         some range of adjustment to dim the screen further than usual in very
         dark rooms. The contents of the screen must still be clearly visible
         in darkness (although they may not be visible in a bright room). -->
    <integer name="config_screenBrightnessDark">3</integer>

    <!-- If supported, are dreams enabled? (by default) -->
    <bool name="config_dreamsEnabledByDefault">false</bool>
	
<!-- Minimum screen brightness setting allowed by the power manager.
        The user is forbidden from setting the brightness below this level. -->
    <integer name="config_screenBrightnessSettingMinimum">1</integer>

    <!-- Screen brightness used to dim the screen when the user activity
        timeout expires.  May be less than the minimum allowed brightness setting
        that can be set by the user. -->
    <integer name="config_screenBrightnessDim">10</integer>

    <integer-array name="config_autoBrightnessLevels">
	<item>2</item>
	<item>10</item>
	<item>50</item>
	<item>90</item>
	<item>100</item>
	<item>150</item>
	<item>200</item>
	<item>300</item>
	<item>400</item>
	<item>500</item>
	<item>800</item>
	<item>1000</item>
	<item>1300</item>
	<item>2000</item>
	<item>3000</item>
	<item>4000</item>
	<item>8000</item>
	<item>20000</item>
    </integer-array>
    
    <!-- Mobile TCP Buffers from stock -->
    <string-array name="config_mobile_tcp_buffers">
	<item>umts:131072,262144,1452032,4096,16384,399360</item>
	<item>hspa:131072,262144,2441216,4096,16384,399360</item>
	<item>hsupa:131072,262144,2441216,4096,16384,399360</item>
	<item>hsdpa:131072,262144,2441216,4096,16384,399360</item>
	<item>hspap:131072,262144,2441216,4096,16384,399360</item>
	<item>edge:16384,32768,131072,4096,16384,65536</item>
	<item>gprs:4096,8192,24576,4096,8192,24576</item>
	<item>1xrtt:16384,32768,131070,4096,16384,102400</item>
	<item>evdo:131072,262144,1048576,4096,16384,524288</item>
	<item>lte:524288,1048576,8388608,262144,524288,4194304</item>
   </string-array>
	
    <!-- Array of output values for LCD backlight corresponding to the LUX values
         in the config_autoBrightnessLevels array.  This array should have size one greater
         than the size of the config_autoBrightnessLevels array.
         The brightness values must be between 0 and 255 and be non-decreasing.
         This must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessLcdBacklightValues">
	<item>3</item>
	<item>11</item>
	<item>40</item>
	<item>62</item>
	<item>74</item>
	<item>85</item>
	<item>102</item>
	<item>102</item>
	<item>102</item>
	<item>102</item>
	<item>128</item>
	<item>153</item>
	<item>170</item>
	<item>179</item>
	<item>238</item>
	<item>255</item>
	<item>255</item>
	<item>255</item>
	<item>256</item>
    </integer-array>
    
    <!-- Is the device capable of hot swapping an UICC Card -->
    <bool name="config_hotswapCapable">true</bool>
    
    <!-- Boolean indicating if current platform supports BLE peripheral mode -->
    <!-- <bool name="config_bluetooth_le_peripheral_mode_supported">false</bool> -->
    <bool name="config_bluetooth_le_peripheral_mode_supported">true</bool>  
    
    <!-- Operating volatage for bluetooth controller. 0 by default -->    
    <!-- <integer name="config_bluetooth_operating_voltage_mv">0</integer> -->
    <integer name="config_bluetooth_operating_voltage_mv">3300</integer>	
	
</resources>	
