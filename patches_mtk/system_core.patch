From 618e6222bd467e53438553143c9afbbaf93735f3 Mon Sep 17 00:00:00 2001
From: mdeejay <mdjrussia@gmail.com>
Date: Thu, 6 Jul 2017 15:55:51 +0700
Subject: changes for MTK

Change-Id: I53a9d2be9aaaec32d2dc73cf2f1ec619d5f71343

diff --git a/include/netutils/ifc.h b/include/netutils/ifc.h
index 3b272343d..89028a38c 100644
--- a/include/netutils/ifc.h
+++ b/include/netutils/ifc.h
@@ -61,6 +61,22 @@ extern int ifc_configure(const char *ifname, in_addr_t address,
 
 extern in_addr_t prefixLengthToIpv4Netmask(int prefix_length);
 
+/* MTK */
+#ifdef MTK_HARDWARE
+extern int ifc_is_up(const char *name, unsigned *isup);
+extern int ifc_enable_allmc(const char *name);
+extern int ifc_disable_allmc(const char *name);
+extern int ifc_set_throttle(const char *ifname, int rxKbps, int txKbps);
+extern int ifc_set_fwmark_rule(const char *ifname, int mark, int add);
+extern int ifc_set_txq_state(const char *ifname, int state);
+extern int ifc_ccmni_md_cfg(const char *ifname, int md_id);
+struct uid_err {
+    int appuid;
+	int errorNum;
+};
+#endif /* MTK_HARDWARE */
+
 __END_DECLS
 
 #endif /* _NETUTILS_IFC_H_ */
diff --git a/init/init.cpp b/init/init.cpp
index 7a370596e..3dbea5eba 100755
--- a/init/init.cpp
+++ b/init/init.cpp
@@ -85,7 +85,7 @@ int have_console;
 std::string console_name = "/dev/console";
 static time_t process_needs_restart;
 
-const char *ENV[32];
+const char *ENV[64];
 
 bool waiting_for_exec = false;
 
@@ -439,7 +439,7 @@ static void selinux_init_all_handles(void)
     selinux_android_set_sehandle(sehandle);
     sehandle_prop = selinux_android_prop_context_handle();
 }
-
+#if 0
 enum selinux_enforcing_status { SELINUX_PERMISSIVE, SELINUX_ENFORCING };
 
 static selinux_enforcing_status selinux_status_from_cmdline() {
@@ -453,11 +453,11 @@ static selinux_enforcing_status selinux_status_from_cmdline() {
 
     return status;
 }
-
+#endif
 static bool selinux_is_enforcing(void)
 {
     if (ALLOW_PERMISSIVE_SELINUX) {
-        return selinux_status_from_cmdline() == SELINUX_ENFORCING;
+        return false;  // selinux_status_from_cmdline() == SELINUX_ENFORCING;
     }
     return true;
 }
diff --git a/init/init.h b/init/init.h
index 345d442c0..f93d0c5ba 100644
--- a/init/init.h
+++ b/init/init.h
@@ -24,7 +24,7 @@ class Service;
 
 #define COMMAND_RETRY_TIMEOUT 5
 
-extern const char *ENV[32];
+extern const char *ENV[64];
 extern bool waiting_for_exec;
 extern int have_console;
 extern std::string console_name;
diff --git a/init/service.cpp b/init/service.cpp
index 8127e708d..a09fd8f71 100644
--- a/init/service.cpp
+++ b/init/service.cpp
@@ -371,12 +371,14 @@ bool Service::Start() {
             scon = ret_scon;
             free(ret_scon);
         }
+#if 0
         if (rc == 0 && scon == mycon) {
             ERROR("Service %s does not have a SELinux domain defined.\n", name_.c_str());
             free(mycon);
             free(fcon);
             return false;
         }
+#endif
         free(mycon);
         free(fcon);
         if (rc < 0) {
diff --git a/libcutils/fs_config.c b/libcutils/fs_config.c
index 68cfcbe00..f19238606 100644
--- a/libcutils/fs_config.c
+++ b/libcutils/fs_config.c
@@ -143,7 +143,8 @@ static const struct fs_path_config android_files[] = {
     { 00700, AID_SYSTEM,    AID_SHELL,     CAP_MASK_LONG(CAP_BLOCK_SUSPEND), "system/bin/inputflinger" },
 
     /* Support FIFO scheduling mode in SurfaceFlinger. */
-    { 00755, AID_SYSTEM,    AID_GRAPHICS,     CAP_MASK_LONG(CAP_SYS_NICE), "system/bin/surfaceflinger" },
+    /* Disabled for now as this caused LD_PRELOAD and LD_SHIM_LIBS to be sanitized in linker */
+    //{ 00755, AID_SYSTEM,    AID_GRAPHICS,     CAP_MASK_LONG(CAP_SYS_NICE), "system/bin/surfaceflinger" },
 
     { 00750, AID_ROOT,      AID_ROOT,      0, "system/bin/uncrypt" },
     { 00750, AID_ROOT,      AID_ROOT,      0, "system/bin/install-recovery.sh" },
diff --git a/libion/Android.mk b/libion/Android.mk
index 6562cd3e9..e3cc5c212 100644
--- a/libion/Android.mk
+++ b/libion/Android.mk
@@ -8,6 +8,15 @@ LOCAL_SHARED_LIBRARIES := liblog
 LOCAL_C_INCLUDES := $(LOCAL_PATH)/include $(LOCAL_PATH)/kernel-headers
 LOCAL_EXPORT_C_INCLUDE_DIRS := $(LOCAL_PATH)/include $(LOCAL_PATH)/kernel-headers
 LOCAL_CFLAGS := -Werror
+
+LOCAL_SHARED_LIBRARIES += libdl libcutils
+#ifeq ($(TARGET_BUILD_VARIANT),eng)
+#ifeq ($(MTK_INTERNAL),yes)
+#LOCAL_CFLAGS += \
+#    -D_MTK_ENG_
+#endif
+#endif
+
 include $(BUILD_SHARED_LIBRARY)
 
 include $(CLEAR_VARS)
@@ -17,6 +26,15 @@ LOCAL_MODULE_TAGS := optional tests
 LOCAL_C_INCLUDES := $(LOCAL_PATH)/include $(LOCAL_PATH)/kernel-headers
 LOCAL_SHARED_LIBRARIES := liblog
 LOCAL_CFLAGS := -Werror
+
+LOCAL_SHARED_LIBRARIES += libdl libcutils libc
+#ifeq ($(TARGET_BUILD_VARIANT),eng)
+#ifeq ($(MTK_INTERNAL),yes)
+#LOCAL_CFLAGS += \
+#    -D_MTK_ENG_
+#endif
+#endif
+
 include $(BUILD_EXECUTABLE)
 
-include $(call first-makefiles-under,$(LOCAL_PATH))
+include $(call all-makefiles-under,$(LOCAL_PATH))
diff --git a/libion/ion.c b/libion/ion.c
index d1984bd06..69fa2d747 100644
--- a/libion/ion.c
+++ b/libion/ion.c
@@ -1,4 +1,9 @@
 /*
+* Copyright (C) 2014 MediaTek Inc.
+* Modification based on code covered by the mentioned copyright
+* and/or permission notice(s).
+*/
+/*
  *  ion.c
  *
  * Memory Allocator functions for ion
@@ -31,12 +36,16 @@
 #include <linux/ion.h>
 #include <ion/ion.h>
 
+#include <cutils/properties.h>
+#include <dlfcn.h>
+//#include "../../../vendor/mediatek/proprietary/external/udf/ubrd_config.h"     
+
 int ion_open()
 {
     int fd = open("/dev/ion", O_RDWR);
     if (fd < 0)
         ALOGE("open /dev/ion failed!\n");
-    return fd;
+	return fd;
 }
 
 int ion_close(int fd)
@@ -51,10 +60,10 @@ static int ion_ioctl(int fd, int req, void *arg)
 {
     int ret = ioctl(fd, req, arg);
     if (ret < 0) {
-        ALOGE("ioctl %x failed with code %d: %s\n", req,
-              ret, strerror(errno));
-        return -errno;
-    }
+		ALOGE("ioctl %x failed with code %d: %s\n", req,
+				ret, strerror(errno));
+		return -errno;
+	}
     return ret;
 }
 
@@ -118,6 +127,9 @@ int ion_map(int fd, ion_user_handle_t handle, size_t length, int prot,
     return ret;
 }
 
+#define DLSYM_FIND_MAX 10
+static int dlsym_counter = DLSYM_FIND_MAX;
+static void (*fd_bt_rd)(int) = NULL;
 int ion_share(int fd, ion_user_handle_t handle, int *share_fd)
 {
     int ret;
@@ -131,11 +143,27 @@ int ion_share(int fd, ion_user_handle_t handle, int *share_fd)
     ret = ion_ioctl(fd, ION_IOC_SHARE, &data);
     if (ret < 0)
         return ret;
-    if (data.fd < 0) {
+    *share_fd = data.fd;
+    if (*share_fd < 0) {
         ALOGE("share ioctl returned negative fd\n");
         return -EINVAL;
     }
-    *share_fd = data.fd;
+    
+/*#ifdef _MTK_ENG_
+    if(dlsym_counter > 0 && fd_bt_rd == NULL) {
+        dlsym_counter--;
+        fd_bt_rd = (void (*)(int))dlsym(RTLD_DEFAULT, "fdleak_record_backtrace");
+        if (!fd_bt_rd) {
+            ALOGE("[FDLEAK_TEST]dlerror:%s, %d times.\n", dlerror(), (DLSYM_FIND_MAX - dlsym_counter));
+        } else {
+            ALOGD("[FDLEAK_TEST]fdleak_record_backtrace:%p\n", fd_bt_rd);
+        }
+    }
+    if (fd_bt_rd) {
+	fd_bt_rd(*share_fd);
+    }
+#endif*/
+
     return ret;
 }
 
diff --git a/libion/ion_test.c b/libion/ion_test.c
index b7d558354..85166a691 100644
--- a/libion/ion_test.c
+++ b/libion/ion_test.c
@@ -61,7 +61,7 @@ void ion_alloc_test()
     if(_ion_alloc_test(&fd, &handle))
         return;
 
-    ret = ion_free(fd, handle);
+	ret = ion_free(fd, handle);
     if (ret) {
         printf("%s failed: %s %d\n", __func__, strerror(ret), handle);
         return;
@@ -164,8 +164,10 @@ void ion_share_test()
         printf("master->master? [%10s]\n", ptr);
         if (recvmsg(sd[0], &msg, 0) < 0)
             perror("master recv 1");
-        close(fd);
-        _exit(0);
+		munmap(ptr, len);
+		
+		ret = ion_free(fd, handle);
+		ion_close(fd);
     } else {
         struct cmsghdr *cmsg;
         char* ptr;
@@ -206,7 +208,9 @@ void ion_share_test()
         strcpy(ptr, "child");
         printf("child sending msg 2\n");
         sendmsg(sd[1], &child_msg, 0);
-        close(fd);
+		munmap(ptr, len);
+		close(fd);
+		exit(0);
     }
 }
 
diff --git a/libion/tests/Android.mk b/libion/tests/Android.mk
index 894f90e4a..daf81a905 100644
--- a/libion/tests/Android.mk
+++ b/libion/tests/Android.mk
@@ -1,4 +1,9 @@
 #
+# Copyright (C) 2014 MediaTek Inc.
+# Modification based on code covered by the mentioned copyright
+# and/or permission notice(s).
+#
+#
 # Copyright (C) 2013 The Android Open Source Project
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
@@ -20,6 +25,9 @@ include $(CLEAR_VARS)
 LOCAL_MODULE := ion-unit-tests
 LOCAL_CFLAGS += -g -Wall -Werror -std=gnu++11 -Wno-missing-field-initializers
 LOCAL_SHARED_LIBRARIES += libion
+LOCAL_STATIC_LIBRARIES += libgtest_main
+LOCAL_MULTILIB := both
+LOCAL_MODULE_TAGS := eng
 LOCAL_C_INCLUDES := $(LOCAL_PATH)/../kernel-headers
 LOCAL_SRC_FILES := \
 	ion_test_fixture.cpp \
diff --git a/liblog/logger_write.c b/liblog/logger_write.c
index c7b5a8415..5a0e56496 100644
--- a/liblog/logger_write.c
+++ b/liblog/logger_write.c
@@ -31,6 +31,10 @@
 #include <private/android_filesystem_config.h>
 #include <private/android_logger.h>
 
+#ifndef FAKE_LOG_DEVICE
+#include <sys/system_properties.h>
+#endif
+
 #include "config_write.h"
 #include "log_portability.h"
 #include "logger.h"
@@ -389,27 +393,36 @@ LIBLOG_ABI_PUBLIC int __android_log_buf_write(int bufID, int prio,
                                               const char *tag, const char *msg)
 {
     struct iovec vec[3];
-    char tmp_tag[32];
+    char tmp_tag[32]="0";
 
     if (!tag)
         tag = "";
 
     /* XXX: This needs to go! */
     if ((bufID != LOG_ID_RADIO) &&
-         (!strcmp(tag, "HTC_RIL") ||
-        !strncmp(tag, "RIL", 3) || /* Any log tag with "RIL" as the prefix */
-        !strncmp(tag, "IMS", 3) || /* Any log tag with "IMS" as the prefix */
-        !strcmp(tag, "AT") ||
-        !strcmp(tag, "GSM") ||
-        !strcmp(tag, "STK") ||
-        !strcmp(tag, "CDMA") ||
-        !strcmp(tag, "PHONE") ||
-        !strcmp(tag, "SMS"))) {
-            bufID = LOG_ID_RADIO;
-            /* Inform third party apps/ril/radio.. to use Rlog or RLOG */
-            snprintf(tmp_tag, sizeof(tmp_tag), "use-Rlog/RLOG-%s", tag);
-            tag = tmp_tag;
+	(!strcmp(tag, "HTC_RIL") ||
+	 !strncmp(tag, "RIL", 3) || /* Any log tag with "RIL" as the prefix */
+	 !strncmp(tag, "IMS", 3) || /* Any log tag with "IMS" as the prefix */
+	 !strcmp(tag, "AT") ||
+	 !strcmp(tag, "GSM") ||
+	 !strcmp(tag, "STK") ||
+	 !strcmp(tag, "CDMA") ||
+	 !strcmp(tag, "PHONE") ||
+	 !strcmp(tag, "SMS"))) {
+	bufID = LOG_ID_RADIO;
+	/* Inform third party apps/ril/radio.. to use Rlog or RLOG */
+	snprintf(tmp_tag, sizeof(tmp_tag), "use-Rlog/RLOG-%s", tag);
+	tag = tmp_tag;
+    }
+
+#ifndef FAKE_LOG_DEVICE
+    /* check property for moving all RIL logs to main */
+    if (bufID == LOG_ID_RADIO) {
+	if ((__system_property_get("persist.ril.log",tmp_tag) > 0) &&
+		!strcmp(tmp_tag,"1"))
+	    bufID = LOG_ID_MAIN;
     }
+#endif
 
 #if __BIONIC__
     if (prio == ANDROID_LOG_FATAL) {
@@ -581,3 +594,28 @@ LIBLOG_ABI_PUBLIC int __android_log_security_bswrite(int32_t tag,
 
     return write_to_log(LOG_ID_SECURITY, vec, 4);
 }
+
+#ifdef MTK_HARDWARE
+#ifndef __unused
+#define __unused  __attribute__((__unused__))
+#endif
+struct xlog_record {
+    const char *tag_str;
+    const char *fmt_str;
+    int prio;
+};
+
+LIBLOG_ABI_PUBLIC void __attribute__((weak)) __xlog_buf_printf(int bufid __unused, const struct xlog_record *xlog_record __unused, ...) {
+#ifndef FAKE_LOG_DEVICE
+    char prop[32]="0";
+    /* check property for diable all xlog */
+    __system_property_get("ro.disable.xlog",prop);
+    if (!strcmp(prop, "0"))
+#endif
+    {
+	va_list args;
+	va_start(args, xlog_record);
+	__android_log_vprint(xlog_record->prio, xlog_record->tag_str, xlog_record->fmt_str, args);
+    }
+}
+#endif
diff --git a/libnetutils/Android.mk b/libnetutils/Android.mk
index ff899c0f5..8c5334909 100644
--- a/libnetutils/Android.mk
+++ b/libnetutils/Android.mk
@@ -15,6 +15,13 @@ LOCAL_MODULE := libnetutils
 
 LOCAL_CFLAGS := -Werror
 
+ifeq ($(BOARD_HAS_MTK_HARDWARE),true)
+LOCAL_CFLAGS += -DMTK_HARDWARE -Wno-unused-parameter
+endif
+
+$(info TARGET_GLOBAL_CFLAGS: $(TARGET_GLOBAL_CFLAGS))
+$(info LOCAL_CFLAGS: $(LOCAL_CFLAGS))
+
 include $(BUILD_SHARED_LIBRARY)
 
 include $(CLEAR_VARS)
diff --git a/libnetutils/ifc_utils.c b/libnetutils/ifc_utils.c
index 7739cf459..fcf052914 100644
--- a/libnetutils/ifc_utils.c
+++ b/libnetutils/ifc_utils.c
@@ -40,6 +40,10 @@
 
 #include "netutils/ifc.h"
 
+#ifdef MTK_HARDWARE
+#include <linux/un.h>
+#endif
+
 #ifdef ANDROID
 #define LOG_TAG "NetUtils"
 #include <cutils/log.h>
@@ -56,6 +60,10 @@
 #define SIOCKILLADDR 0x8939
 #endif
 
+#ifdef MTK_HARDWARE
+#define SIOCKILLSOCK 0x893a
+#endif
+
 static int ifc_ctl_sock = -1;
 static int ifc_ctl_sock6 = -1;
 static pthread_mutex_t ifc_sock_mutex = PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP;
@@ -737,3 +745,265 @@ ifc_configure(const char *ifname,
 
     return 0;
 }
+
+
+/* MTK */
+#ifdef MTK_HARDWARE
+
+int ifc_reset_connection_by_uid(int uid, int error)
+{
+#ifdef HAVE_ANDROID_OS
+
+    int tcp_ctl_sock;
+    int result = -1;
+    struct uid_err uid_e;
+
+    uid_e.appuid = uid;
+    uid_e.errorNum = error;
+
+    tcp_ctl_sock = socket(AF_INET, SOCK_STREAM, 0);
+    if (tcp_ctl_sock < 0) {
+        printerr("socket() failed: %s\n", strerror(errno));
+        return -1;
+    }
+
+    if(uid_e.appuid < 0){
+        ALOGE("ifc_reset_connection_by_uid, invalide uid: %d", uid_e.appuid);
+        close(tcp_ctl_sock);
+        return -1;
+    }
+
+    ALOGD("ifc_reset_connection_by_uid, appuid = %d, error = %d ",
+              uid_e.appuid, uid_e.errorNum);
+    result = ioctl(tcp_ctl_sock, SIOCKILLSOCK, &uid_e);
+    if(result < 0)
+        ALOGE("ifc_reset_connection_by_uid, result= %d, error =%s ", result, strerror(errno));
+
+        close(tcp_ctl_sock);
+    ALOGD("ifc_reset_connection_by_uid, result= %d ",result);
+    return result;
+#else
+    return 0;
+#endif
+}
+
+int ifc_enable_allmc(const char *ifname)
+{
+    int result;
+
+    ifc_init();
+    result = ifc_set_flags(ifname, IFF_ALLMULTI, 0);
+    ifc_close();
+
+    ALOGD("ifc_enable_allmc(%s) = %d", ifname, result);
+    return result;
+}
+
+int ifc_disable_allmc(const char *ifname)
+{
+    int result;
+
+    ifc_init();
+    result = ifc_set_flags(ifname, 0, IFF_ALLMULTI);
+    ifc_close();
+
+    ALOGD("ifc_disable_allmc(%s) = %d", ifname, result);
+    return result;
+}
+int ifc_is_up(const char *name, unsigned *isup)
+{
+    struct ifreq ifr;
+    ifc_init_ifr(name, &ifr);
+
+    if(ioctl(ifc_ctl_sock, SIOCGIFFLAGS, &ifr) < 0) {
+        printerr("ifc_is_up get flags error:%d(%s)", errno, strerror(errno));
+        return -1;
+    }
+    if(ifr.ifr_flags & IFF_UP)
+        *isup = 1;
+    else
+        *isup = 0;
+
+    return 0;
+}
+
+static int ifc_netd_sock_init(void)
+{
+    int ifc_netd_sock;
+    const int one = 1;
+    struct sockaddr_un netd_addr;
+
+        ifc_netd_sock = socket(AF_UNIX, SOCK_STREAM, 0);
+        if (ifc_netd_sock < 0) {
+            printerr("ifc_netd_sock_init: create socket failed");
+            return -1;
+        }
+
+        setsockopt(ifc_netd_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one));
+        memset(&netd_addr, 0, sizeof(netd_addr));
+        netd_addr.sun_family = AF_UNIX;
+        strlcpy(netd_addr.sun_path, "/dev/socket/netd",
+            sizeof(netd_addr.sun_path));
+        if (TEMP_FAILURE_RETRY(connect(ifc_netd_sock,
+                     (const struct sockaddr*) &netd_addr,
+                     sizeof(netd_addr))) != 0) {
+            printerr("ifc_netd_sock_init: connect to netd failed, fd=%d, err: %d(%s)",
+                ifc_netd_sock, errno, strerror(errno));
+            close(ifc_netd_sock);
+            return -1;
+        }
+
+    if (DBG) printerr("ifc_netd_sock_init fd=%d", ifc_netd_sock);
+    return ifc_netd_sock;
+}
+
+/*do not call this function in netd*/
+int ifc_set_throttle(const char *ifname, int rxKbps, int txKbps)
+{
+    FILE* fnetd = NULL;
+    int ret = -1;
+    int seq = 1;
+    char rcv_buf[24];
+    int nread = 0;
+    int netd_sock = 0;
+
+    ALOGD("enter ifc_set_throttle: ifname = %s, rx = %d kbs, tx = %d kbs", ifname, rxKbps, txKbps);
+
+    netd_sock = ifc_netd_sock_init();
+    if(netd_sock <= 0)
+        goto exit;
+
+    // Send the request.
+    fnetd = fdopen(netd_sock, "r+");
+    if(fnetd == NULL){
+        ALOGE("open netd socket failed, err:%d(%s)", errno, strerror(errno));
+        goto exit;
+    }
+    if (fprintf(fnetd, "%d interface setthrottle %s %d %d", seq, ifname, rxKbps, txKbps) < 0) {
+        goto exit;
+    }
+    // literal NULL byte at end, required by FrameworkListener
+    if (fputc(0, fnetd) == EOF ||
+        fflush(fnetd) != 0) {
+        goto exit;
+    }
+    ret = 0;
+
+    //Todo: read the whole response from netd
+    nread = fread(rcv_buf, 1, 20, fnetd);
+    rcv_buf[23] = 0;
+    ALOGD("response: %s", rcv_buf);
+exit:
+    if (fnetd != NULL) {
+        fclose(fnetd);
+    }
+    return ret;
+}
+
+/*do not call this function in netd*/
+int ifc_set_fwmark_rule(const char *ifname, int mark, int add)
+{
+    FILE* fnetd = NULL;
+    int ret = -1;
+    int seq = 2;
+    char rcv_buf[24];
+      int nread = 0;
+      const char* op;
+    int netd_sock = 0;
+
+    if (add) {
+        op = "add";
+    } else {
+        op = "remove";
+    }
+    ALOGD("enter ifc_set_fwmark_rule: ifname = %s, mark = %d, op = %s", ifname, mark, op);
+
+    netd_sock = ifc_netd_sock_init();
+    if(netd_sock <= 0)
+        goto exit;
+
+    // Send the request.
+    fnetd = fdopen(netd_sock, "r+");
+    if(fnetd == NULL){
+        ALOGE("open netd socket failed, err:%d(%s)", errno, strerror(errno));
+        goto exit;
+    }
+    if (fprintf(fnetd, "%d network fwmark %s %s %d", seq, op, ifname, mark) < 0) {
+        goto exit;
+    }
+    // literal NULL byte at end, required by FrameworkListener
+    if (fputc(0, fnetd) == EOF ||
+        fflush(fnetd) != 0) {
+        goto exit;
+    }
+    ret = 0;
+
+    //Todo: read the whole response from netd
+    nread = fread(rcv_buf, 1, 20, fnetd);
+    rcv_buf[23] = 0;
+    ALOGD("ifc_set_fwmark_rule response: %s", rcv_buf);
+exit:
+    if (fnetd != NULL) {
+        fclose(fnetd);
+    }
+    return ret;
+}
+
+
+#define SIOCSTXQSTATE (SIOCDEVPRIVATE + 0)  //start/stop ccmni tx queue
+#define SIOCSCCMNICFG (SIOCDEVPRIVATE + 1)  //configure ccmni/md remapping
+
+int ifc_set_txq_state(const char *ifname, int state)
+{
+    struct ifreq ifr;
+    int ret, ctl_sock;
+
+    memset(&ifr, 0, sizeof(struct ifreq));
+    strncpy(ifr.ifr_name, ifname, IFNAMSIZ);
+    ifr.ifr_name[IFNAMSIZ - 1] = 0;
+    ifr.ifr_ifru.ifru_ivalue = state;
+
+    ctl_sock = socket(AF_INET, SOCK_DGRAM, 0);
+    if(ctl_sock < 0){
+        ALOGE("create ctl socket failed\n");
+        return -1;
+    }
+    ret = ioctl(ctl_sock, SIOCSTXQSTATE, &ifr);
+    if(ret < 0)
+        ALOGE("ifc_set_txq_state failed, err:%d(%s)\n", errno, strerror(errno));
+    else
+        ALOGI("ifc_set_txq_state as %d, ret: %d\n", state, ret);
+
+    close(ctl_sock);
+
+    return ret;
+}
+
+int ifc_ccmni_md_cfg(const char *ifname, int md_id)
+{
+    struct ifreq ifr;
+    int ret = 0;
+    int ctl_sock = 0;
+
+    ifc_init_ifr(ifname, &ifr);
+    ifr.ifr_ifru.ifru_ivalue = md_id;
+
+    ctl_sock = socket(AF_INET, SOCK_DGRAM, 0);
+    if(ctl_sock < 0){
+        printerr("ifc_ccmni_md_cfg: create ctl socket failed\n");
+        return -1;
+    }
+
+    if(ioctl(ctl_sock, SIOCSCCMNICFG, &ifr) < 0) {
+        printerr("ifc_ccmni_md_configure(ifname=%s, md_id=%d) error:%d(%s)", \
+            ifname, md_id, errno, strerror(errno));
+        ret = -1;
+    } else {
+        printerr("ifc_ccmni_md_configure(ifname=%s, md_id=%d) OK", ifname, md_id);
+    }
+
+    close(ctl_sock);
+    return ret;
+}
+
+#endif /* MTK_HARDWARE */
